{"name":"Go0","tagline":"go simple study","body":"`go学习：`\r\n\r\ngolang 的目标就是具有c的执行效率，具有python的开发效率．     \r\n\r\n\r\n首先就是go环境的搭建： \r\n===\r\n* linux上：   \r\n　　可以使用yum或apt进行安装．    \r\n　　也可以使用golang源码进行安装．   \r\n   \r\n\r\n* windows上:   \r\n\r\n * 1.下载go源码  \r\n * 2.下载相应的ide[liteide]还不错   \r\n * 3.相关环境变量的配置［GOPATH,GOROOT］   \r\n\r\n\r\nGOPATH:go的工作目录    \r\nGOROOT:go的安装目录　默认/usr/local/go   \r\n\r\n其实经常用到的就是GOPATH，比如用到了自己写的包，通常把其自己写的放在GOPATH/src/目录下．   \r\n\r\n\r\n////////////////////////////    \r\nexport GOROOT=$HOME/go     \r\n\r\nexport GOBIN=$GOROOT/bin   \r\n\r\nexport PATH=$PATH:$GOBIN    \r\n////////////////////////////     \r\n\r\ngo 编辑器\r\n====\r\n* [Using Sublime Text for Go](http://www.wolfe.id.au/2015/03/05/using-sublime-text-for-go-development/)\r\n* 或是使用国人开发的liteide\r\n\r\ngo文档的观看：  \r\n===\r\n　　由于墙的存在，所以自己本地搭建go doc进行文档的查询： godoc -http=\":9908\"    \r\n端口可以自己设置，然后在浏览器访问127.0.0.1:9908就可以查看go文档了．    \r\n　　在这里给一个文档还不错[godoc](http://ilovers.sinaapp.com/doc/golang-specification.html)   \r\n\r\n\r\n\r\ngo的常用的基本命令：    \r\n===\r\n\r\n编译go文件　　　　　go build xxx.go　　产生二进制文件     \r\n编译go直接运行　　　go run xxx.go　　  直接执行   \r\n  \r\n* go fmt  对其go文件进行相应的格式化    \r\n* go test 对其指定的目录下的以test结尾的文件(*_test.go)编译并执行    \r\n* go get  下载然后编译然后安装    \r\n* go install 编译生成可执行文件，然后进行安装［一般会在GOPATH/pkg或是GOPATH/bin目录下］    \r\n\r\n\r\ngo相关语法：    \r\n====\r\n　go相关的语法就不细说，只要写过ｃ就没有问题，go和ｃ还是很像的．    \r\n　最开始写go的时候，其实最大的接受不了的就是go的变量的定义格式如：    \r\n　var str string --->即变量名在类型的左边．    \r\n\r\ngo函数:    \r\n====\r\n  和ｃ的差别是可以返回多个值． \r\n  \r\n```golang\r\n  func add_sub(a, b int)(int, int){\r\n      return a+b, a-b\r\n  }\r\n  ```\r\n  \r\n  \r\n\r\n\r\ngo中的神器interface:    \r\n====\r\ngo中的interface是很强大的，可以实现类似c++中虚函数的功能．   \r\n  \r\n```golang\r\npackage main\r\nimport \"fmt\"\r\n\r\ntype Human struct {\r\n    name string\r\n    age int\r\n    phone string\r\n}\r\n\r\ntype Student struct {\r\n    Human //匿名字段\r\n    school string\r\n    loan float32\r\n}\r\n\r\ntype Employee struct {\r\n    Human //匿名字段\r\n    company string\r\n    money float32\r\n}\r\n\r\n//Human实现SayHi方法\r\nfunc (h Human) SayHi() {\r\n    fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)\r\n}\r\n\r\n//Human实现Sing方法\r\nfunc (h Human) Sing(lyrics string) {\r\n    fmt.Println(\"La la la la...\", lyrics)\r\n}\r\n\r\n//Employee重载Human的SayHi方法\r\nfunc (e Employee) SayHi() {\r\n    fmt.Printf(\"Hi, I am %s, I work at %s. Call me on %s\\n\", e.name,\r\n        e.company, e.phone)\r\n    }\r\n\r\n// Interface Men被Human,Student和Employee实现\r\n// 因为这三个类型都实现了这两个方法\r\ntype Men interface {\r\n    SayHi()\r\n    Sing(lyrics string)\r\n}\r\n\r\nfunc main() {\r\n    mike := Student{Human{\"Mike\", 25, \"222-222-XXX\"}, \"MIT\", 0.00}\r\n    paul := Student{Human{\"Paul\", 26, \"111-222-XXX\"}, \"Harvard\", 100}\r\n    sam := Employee{Human{\"Sam\", 36, \"444-222-XXX\"}, \"Golang Inc.\", 1000}\r\n    Tom := Employee{Human{\"Tom\", 37, \"222-444-XXX\"}, \"Things Ltd.\", 5000}\r\n\r\n    //定义Men类型的变量i\r\n    var i Men //此时上面的两个类型由于实现了Men中的方法，所以i可以指向这两个．\r\n\r\n    //i能存储Student\r\n    i = mike\r\n    fmt.Println(\"This is Mike, a Student:\")\r\n    i.SayHi()\r\n    i.Sing(\"November rain\")\r\n\r\n    //i也能存储Employee\r\n    i = Tom\r\n    fmt.Println(\"This is Tom, an Employee:\")\r\n    i.SayHi()\r\n    i.Sing(\"Born to be wild\")\r\n\r\n    //定义了slice Men\r\n    fmt.Println(\"Let's use a slice of Men and see what happens\")\r\n    x := make([]Men, 3)\r\n    //这三个都是不同类型的元素，但是他们实现了interface同一个接口\r\n    x[0], x[1], x[2] = paul, sam, mike\r\n\r\n    for _, value := range x{\r\n        value.SayHi()\r\n    }\r\n}\r\n```\r\n\r\n\r\ngo可以实现面向对象：\r\n====\r\ngo利用其结构体,这个和lua有些类似．\r\n\r\n　如下：\r\n```golang\r\ntype Human struct {\r\n    name string\r\n    age int\r\n    phone string\r\n}\r\n\r\n\r\n//Human对象实现Sayhi方法\r\nfunc (h *Human) SayHi() {\r\n    fmt.Printf(\"Hi, I am %s you can call me on %s\\n\", h.name, h.phone)\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"golang simple study","note":"Don't delete this file! It's used internally to help with page regeneration."}